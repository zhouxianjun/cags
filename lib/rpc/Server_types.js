//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Result = module.exports.Result = function(args) {
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case -2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, -1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, -2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Packet = module.exports.Packet = function(args) {
  this.cmd = null;
  this.result = null;
  this.body = null;
  if (args) {
    if (args.cmd !== undefined && args.cmd !== null) {
      this.cmd = args.cmd;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmd is unset!');
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = new ttypes.Result(args.result);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
Packet.prototype = {};
Packet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case -1:
      if (ftype == Thrift.Type.I16) {
        this.cmd = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case -2:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.Result();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case -3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Packet.prototype.write = function(output) {
  output.writeStructBegin('Packet');
  if (this.cmd !== null && this.cmd !== undefined) {
    output.writeFieldBegin('cmd', Thrift.Type.I16, -1);
    output.writeI16(this.cmd);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, -2);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, -3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

